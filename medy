#!/bin/bash
# medy: package manager for cygwin
#
# The MIT License (MIT)
#
# Copyright (c) 2015 nobuyo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# ._ _  _  _|   
# | | |(/_(_|\/ 
#            /  

medy_logo="
  ._ _  _  _|   
  | | |(/_(_|\/ 
             /  
"

medy=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)/$(basename $0)
lab_dir=$(cd $(dirname ${BASH_SOURCE:-$0}); pwd)

function usage {
  echo "medy: Install (or build) and remove Cygwin package"
}

function version {
  echo "$medy_logo"
  echo "  medy version 0.01"
  echo "  Written by nobuyo"
  echo "  Copyright (c) 2015 nobuyo.  Released under the MIT license"
}

function warn {
  # color:yellow
  echo -e " \033[33mWarning:\033[m" "$*"
}

function error {
  # color:red
  echo -e " \033[31mError  :\033[m" "$*"
}

function success {
  # color:green
  echo -e " \033[32mSuccess:\033[m" "$*"
}

function newline {
  echo ""
}

function where_mirror {
  echo "Mirror server is $1"
}

function where_dir {
  echo "Cache directory is $1"
}

function cygwin_arch {
  arch | awk '{sub("i686", "x86"); print $0;}'
}

function encode_mirror_url {
  echo "$1" | sed -e "s/:/%3a/g" -e "s:/:%2f:g"
}

function is_available {
  which "$1" >/dev/null 2>&1
  return $?
}

function checkpackages {
  if [ $# -eq 0 ]; then
    echo Nothing to do, exiting
    exit 0
  fi
}

function get {
  if is_available "wget"; then
    command wget "$@" &>/dev/null
  # elif is_available "curl"; then
  #   command curl -O "${@:2}"
  else
    warn "wget not installed."
  fi
}

function establish_lab {

  # get mirror and cache dir from local

  #default
  mirror=ftp://ftp.iij.ad.jp/pub/cygwin
  cache=/medycache
  arch="$(cygwin_arch)"

  if [ -e /etc/setup/last-mirror ]; then
    mirror="$(head -1 /etc/setup/last-mirror)"
  elif [ -e /etc/setup/setup.rc ]; then
    mirror="$(awk '/last-mirror/ {getline; print $1}' /etc/setup/setup.rc)"
  fi
  
  dir="$(encode_mirror_url "$mirror/")"

  if [ -e /etc/setup/last-cache ]; then
    cache="$(cygpath -au "$(head -1 /etc/setup/last-mirror)")"    
  elif [ -e /etc/setup/setup.rc ]; then
    cache="$(cygpath -au "$(awk '/last-cache/ {getline; print $1}' /etc/setup/setup.rc)")"
  fi
  

  where_mirror $mirror
  where_dir $cache

  mkdir -p "$cache/$dir/$arch"
  cd "$cache/$dir/$arch"
  if [ -e setup.ini ]; then
    return 0
  else
    get_setup
    return 1
  fi
}



function get_setup {
  touch setup.ini
  mv setup.ini setup.ini-save
  get -N $mirror/$arch/setup.bz2
  if [ -e setup.bz2 ]; then
    bunzip2 setup.bz2
    mv setup setup.ini
    success "Updated setup.ini"
  else
    error "Updateing setup.ini, reverting"
    mv setup.ini-save setup.ini
  fi
}

function update_setup {
  if establish_lab; then
    get_setup
  fi
}

function upgrade_self {
  mv $medy $lab_dir/medy.orig
  get -Oq "https://raw.githubusercontent.com/nobuyo/medy/master/medy" -P /lab_dir
  if [ $? -ne 0 ]; then
    error "medy Could not found, reverting"
    $lab_dir/medy.orig $medy
  fi

  chmod 775 $medy
  success "Updated medy"
}

function help {
  usage
}


OPT_FILES=()
SUBCOMMAND=""
force=""
YES_TO_ALL=false
file_alloc=1
maxcount=5
INITIAL_ARGS=( "$@" )
ARGS=()
while [ $# -gt 0 ]; do
  case "$1" in

    --force)
      force=1
      shift
    ;;

    --mirror|-m)
      echo "${2%/}/" > /etc/setup/last-mirror
      shift ; shift
    ;;

    --help)
      usage
      exit 0
    ;;

    --version)
      version
      exit 0
    ;;

    *)
      if [ -z "$SUBCOMMAND" ]; then
        SUBCOMMAND="$1"
      else
        ARGS+=( "$1" )
      fi
      shift

    ;;

  esac
done

for file in "${OPT_FILES[@]}"; do
  if [ -f "$file" ]; then
    readarray -t -O ${#ARGS[@]} ARGS < "$file"
  else
    warning "File $file not found, skipping"
  fi
done

function list {
    echo 1>&2 The installed packages as follows:
    awk '/[^ ]+ [^ ]+ 0/ {print $1}' /etc/setup/installed.db
}

function search {
  local package

  checkpackages "$@"
  establish_lab
  get_setup

    for pkg do
      echo ""
      echo "Searching for installed packages matching $pkg:"
      awk '/[^ ]+ [^ ]+ 0/ {if ($1 ~ query) print $1}' query="$pkg" /etc/setup/installed.db
      echo ""
      echo "Searching for installable packages matching $pkg:"
      awk -v query="$pkg" \
        'BEGIN{RS="\n\n@ "; FS="\n"; ORS="\n"} {if ($1 ~ query) {print $1}}' \
        setup.ini
    done
}

function info {

  info="$(grep -wA10 "^@ $1$" $cache/$dir/$arch/setup.ini |\
  sed -e 's/^@\s//g' |\
  grep -v 'ldesc\|install:\|source:' |\
  sed '/prev/,+2d' |\
  # sed -e 's/\.\s/.\n/g' -e 's/category:/@/g' |\
  sed -e 's/category: //g' -e 's/sdesc: //g' |\
  sed  -e 's/"//g' -e 's/requires: //g' -e 's/version: //g' -e 's/\\n//g')"

  info_desc="$(echo "$info" | head -n -3)"
  info_version="$(echo "$info" | tail -1)"
  info_require="$(echo "$info" | tail -2 | head -1)"
  info_category="$(echo "$info" | tail -3 | head -1)"

  echo -e "\033[35;4m  Infomation \033[m"
  echo "$1"
  echo -e "\033[35;4m  Description \033[m"""
  echo "$info_desc"
  echo -e "\033[35;4m  Category \033[m"""
  echo "$info_category"
  echo -e "\033[35;4m  Requires \033[m"""""
  echo "$info_require"
  echo -e "\033[35;4m  Version \033[m"""
  echo "$info_version"

}

establish_lab
info git


